#!/usr/bin/env node

const program = require('commander');

const { getToolVersion, runProgram, Command } = require('../src/index');

program
  .version(getToolVersion(), '-v, --version')
  .description('`uxpin-merge` starts up an experimentation mode for the project in the CWD. See more commands below.')
  .option('--webpack-config <path>', 'path to a custom webpack config, relative to the current working directory')
  .option('--wrapper <path>', 'path to a custom component wrapper, relative to the current working directory')
  .option('--cwd <path>', 'working directory: path to root of the DS repository. Default: `./`')
  .option('--config <path>', 'path to a config file. Default: `./uxpin.config.js`')
  .option('--port <number>', 'port number on which the local server will listen. Default: 8877')
  .option('--uxpin-domain <domain>', 'Can be used to set a UXPin private cloud domain. Default: `uxpin.com`')
  .option('--skip-browser', 'Don\'t open browser on start')
  .option('--disable-tunneling', 'Turn off tunneling via ngrok');

program
    .command(Command.INIT)
    .description('Creates default config files (uxpin.config.js, uxpin.webpack.config.js, UXPinWrapper)')
    .option('--cwd <path>', 'working directory: path to root of the DS repository')
    .option('--config <path>', 'path to a config file. Default: `./uxpin.config.js`')
    .action(() => {});

program
    .command(Command.GENERATE_PRESETS)
    .description('Generate presets for components')
    .option('--cwd <path>', 'working directory: path to root of the DS repository. Default: `./`')
    .option('--config <path>', 'path to a config file. Default: `./uxpin.config.js`')
    .option('--component-path <path>', 'path to a component path, relative to the current working directory')
    .action(() => {});


program
    .command(Command.PUSH)
    .description('Upload design system repository information to UXPin')
    .option('--webpack-config <path>', 'path to a custom webpack config, relative to the current working directory')
    .option('--wrapper <path>', 'path to a custom component wrapper, relative to the current working directory')
    .option('--cwd <path>', 'working directory: path to root of the DS repository')
    .option('--config <path>', 'path to a config file. Default: `./uxpin.config.js`')
    .option('--token <token>', 'auth token for the library. Default: `UXPIN_AUTH_TOKEN` env variable')
    .option('--branch <branch>', 'branch to use when uploading. Default: master')
    .option('--tag <tag>', 'tag this push with a specific name or number. The provided name/number is unique and can be used only once.')
    .action(() => {});

program
    .command(Command.DUMP)
    .description('Shows all information (in JSON) about the design system repository and NOT send to UXPin')
    .option('--cwd <path>', 'working directory: path to root of the DS repository')
    .option('--config <path>', 'path to a config file. Default: `./uxpin.config.js`')
    .action(() => {});

program
  .command(Command.SERVER)
  .description('Start local web server and display the list of design system components')
  .option('--port <number>', 'port number')
  .option('--webpack-config <path>', 'path to a custom webpack config, relative to the current working directory')
  .option('--wrapper <path>', 'path to a custom component wrapper, relative to the current working directory')
  .option('--cwd <path>', 'working directory: path to root of the DS repository')
  .action(() => console.log('starting server...'));

program
  .command(Command.SUMMARY)
  .description('Show only design system summary without building it')
  .option('--cwd <path>', 'working directory: path to root of the DS repository')
  .option('--config <path>', 'path to a config file. Default: `./uxpin.config.js`')
  .action(() => {});

program.parse(process.argv);

return runProgram(program);
